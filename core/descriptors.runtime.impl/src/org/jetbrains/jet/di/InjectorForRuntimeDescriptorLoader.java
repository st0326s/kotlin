/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.di;

import org.jetbrains.jet.lang.descriptors.ModuleDescriptor;
import org.jetbrains.jet.lang.resolve.java.JavaDescriptorResolver;
import org.jetbrains.jet.lang.resolve.java.resolver.RuntimeExternalSignatureResolver;
import org.jetbrains.jet.lang.resolve.java.resolver.RuntimeJavaResolverCache;
import org.jetbrains.jet.lang.resolve.java.resolver.RuntimeErrorReporter;
import org.jetbrains.jet.lang.resolve.java.resolver.RuntimeMethodSignatureChecker;
import org.jetbrains.jet.lang.resolve.java.resolver.RuntimeExternalAnnotationResolver;
import org.jetbrains.jet.lang.resolve.java.resolver.RuntimePropertyInitializerEvaluator;
import org.jetbrains.jet.lang.resolve.java.resolver.RuntimeSourceElementFactory;
import org.jetbrains.jet.lang.resolve.java.resolver.RuntimeSamConversionResolver;
import org.jetbrains.jet.lang.resolve.java.lazy.SingleModuleClassResolver;
import org.jetbrains.jet.storage.LockBasedStorageManager;
import org.jetbrains.jet.lang.resolve.java.reflect.ReflectJavaClassFinder;
import org.jetbrains.jet.lang.resolve.kotlin.reflect.ReflectKotlinClassFinder;
import org.jetbrains.jet.lang.resolve.java.lazy.LazyJavaPackageFragmentProvider;
import org.jetbrains.jet.lang.resolve.java.lazy.GlobalJavaResolverContext;
import org.jetbrains.jet.lang.resolve.kotlin.DeserializedDescriptorResolver;
import org.jetbrains.jet.lang.resolve.kotlin.DeserializationComponentsForJava;
import org.jetbrains.jet.lang.resolve.kotlin.JavaClassDataFinder;
import org.jetbrains.jet.lang.resolve.kotlin.BinaryClassAnnotationAndConstantLoaderImpl;
import org.jetbrains.annotations.NotNull;
import javax.annotation.PreDestroy;

/* This file is generated by org.jetbrains.jet.generators.injectors.InjectorsPackage. DO NOT EDIT! */
@SuppressWarnings("all")
public class InjectorForRuntimeDescriptorLoader {

    private final ClassLoader classLoader;
    private final ModuleDescriptor moduleDescriptor;
    private final JavaDescriptorResolver javaDescriptorResolver;
    private final RuntimeExternalSignatureResolver runtimeExternalSignatureResolver;
    private final RuntimeJavaResolverCache runtimeJavaResolverCache;
    private final RuntimeErrorReporter runtimeErrorReporter;
    private final RuntimeMethodSignatureChecker runtimeMethodSignatureChecker;
    private final RuntimeExternalAnnotationResolver runtimeExternalAnnotationResolver;
    private final RuntimePropertyInitializerEvaluator runtimePropertyInitializerEvaluator;
    private final RuntimeSourceElementFactory runtimeSourceElementFactory;
    private final RuntimeSamConversionResolver runtimeSamConversionResolver;
    private final SingleModuleClassResolver singleModuleClassResolver;
    private final LockBasedStorageManager lockBasedStorageManager;
    private final ReflectJavaClassFinder reflectJavaClassFinder;
    private final ReflectKotlinClassFinder reflectKotlinClassFinder;
    private final LazyJavaPackageFragmentProvider lazyJavaPackageFragmentProvider;
    private final GlobalJavaResolverContext globalJavaResolverContext;
    private final DeserializedDescriptorResolver deserializedDescriptorResolver;
    private final DeserializationComponentsForJava deserializationComponentsForJava;
    private final JavaClassDataFinder javaClassDataFinder;
    private final BinaryClassAnnotationAndConstantLoaderImpl binaryClassAnnotationAndConstantLoader;

    public InjectorForRuntimeDescriptorLoader(
        @NotNull ClassLoader classLoader,
        @NotNull ModuleDescriptor moduleDescriptor
    ) {
        this.classLoader = classLoader;
        this.moduleDescriptor = moduleDescriptor;
        this.lockBasedStorageManager = new LockBasedStorageManager();
        this.reflectJavaClassFinder = new ReflectJavaClassFinder(classLoader);
        this.reflectKotlinClassFinder = new ReflectKotlinClassFinder(classLoader);
        this.runtimeErrorReporter = RuntimeErrorReporter.INSTANCE$;
        this.deserializedDescriptorResolver = new DeserializedDescriptorResolver(runtimeErrorReporter);
        this.runtimeExternalAnnotationResolver = RuntimeExternalAnnotationResolver.INSTANCE$;
        this.runtimeExternalSignatureResolver = RuntimeExternalSignatureResolver.INSTANCE$;
        this.runtimeMethodSignatureChecker = RuntimeMethodSignatureChecker.INSTANCE$;
        this.runtimeJavaResolverCache = RuntimeJavaResolverCache.INSTANCE$;
        this.runtimePropertyInitializerEvaluator = RuntimePropertyInitializerEvaluator.INSTANCE$;
        this.runtimeSamConversionResolver = RuntimeSamConversionResolver.INSTANCE$;
        this.runtimeSourceElementFactory = RuntimeSourceElementFactory.INSTANCE$;
        this.singleModuleClassResolver = new SingleModuleClassResolver();
        this.globalJavaResolverContext = new GlobalJavaResolverContext(lockBasedStorageManager, reflectJavaClassFinder, reflectKotlinClassFinder, deserializedDescriptorResolver, runtimeExternalAnnotationResolver, runtimeExternalSignatureResolver, runtimeErrorReporter, runtimeMethodSignatureChecker, runtimeJavaResolverCache, runtimePropertyInitializerEvaluator, runtimeSamConversionResolver, runtimeSourceElementFactory, singleModuleClassResolver);
        this.lazyJavaPackageFragmentProvider = new LazyJavaPackageFragmentProvider(globalJavaResolverContext, moduleDescriptor);
        this.javaDescriptorResolver = new JavaDescriptorResolver(lazyJavaPackageFragmentProvider, moduleDescriptor);
        this.javaClassDataFinder = new JavaClassDataFinder(reflectKotlinClassFinder, deserializedDescriptorResolver);
        this.binaryClassAnnotationAndConstantLoader = new BinaryClassAnnotationAndConstantLoaderImpl(moduleDescriptor, lockBasedStorageManager, reflectKotlinClassFinder, runtimeErrorReporter);
        this.deserializationComponentsForJava = new DeserializationComponentsForJava(lockBasedStorageManager, moduleDescriptor, javaClassDataFinder, binaryClassAnnotationAndConstantLoader, lazyJavaPackageFragmentProvider);

        singleModuleClassResolver.setResolver(javaDescriptorResolver);

        deserializedDescriptorResolver.setComponents(deserializationComponentsForJava);

    }

    @PreDestroy
    public void destroy() {
    }

    public JavaDescriptorResolver getJavaDescriptorResolver() {
        return this.javaDescriptorResolver;
    }

}

/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.resolve.typeApproximation;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.jet.JUnit3RunnerWithInners;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/capturedTypeApproximation")
@TestDataPath("$PROJECT_ROOT")
@InnerTestClasses({CapturedTypeApproximationTestGenerated.Approximation.class})
@RunWith(JUnit3RunnerWithInners.class)
public class CapturedTypeApproximationTestGenerated extends AbstractCapturedTypeApproximationTest {
    public void testAllFilesPresentInCapturedTypeApproximation() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/capturedTypeApproximation"), Pattern.compile("^(.+)\\.kt$"), true);
    }

    @TestMetadata("compiler/testData/capturedTypeApproximation/approximation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Approximation extends AbstractCapturedTypeApproximationTest {
        public void testAllFilesPresentInApproximation() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/capturedTypeApproximation/approximation"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("contravariant.kt")
        public void testContravariant() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/contravariant.kt");
            doTest(fileName);
        }

        @TestMetadata("covariant.kt")
        public void testCovariant() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/covariant.kt");
            doTest(fileName);
        }

        @TestMetadata("invariant.kt")
        public void testInvariant() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/invariant.kt");
            doTest(fileName);
        }

        @TestMetadata("nestedCov.kt")
        public void testNestedCov() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nestedCov.kt");
            doTest(fileName);
        }

        @TestMetadata("nestedInv.kt")
        public void testNestedInv() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nestedInv.kt");
            doTest(fileName);
        }

        @TestMetadata("nestedInvLevel2.kt")
        public void testNestedInvLevel2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nestedInvLevel2.kt");
            doTest(fileName);
        }

        @TestMetadata("nullableTypeVariable.kt")
        public void testNullableTypeVariable() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nullableTypeVariable.kt");
            doTest(fileName);
        }

        @TestMetadata("useSiteVarianceIn.kt")
        public void testUseSiteVarianceIn() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/useSiteVarianceIn.kt");
            doTest(fileName);
        }

        @TestMetadata("useSiteVarianceOut.kt")
        public void testUseSiteVarianceOut() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/useSiteVarianceOut.kt");
            doTest(fileName);
        }
    }
}

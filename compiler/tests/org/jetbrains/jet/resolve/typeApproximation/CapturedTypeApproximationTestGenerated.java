/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.resolve.typeApproximation;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.jet.JUnit3RunnerWithInners;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/capturedTypeApproximation")
@TestDataPath("$PROJECT_ROOT")
@InnerTestClasses({CapturedTypeApproximationTestGenerated.Approximation.class})
@RunWith(JUnit3RunnerWithInners.class)
public class CapturedTypeApproximationTestGenerated extends AbstractCapturedTypeApproximationTest {
    public void testAllFilesPresentInCapturedTypeApproximation() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/capturedTypeApproximation"), Pattern.compile("^(.+)\\.kt$"), true);
    }

    @TestMetadata("declarations.kt")
    public void testDeclarations() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/declarations.kt");
        doTest(fileName);
    }

    @TestMetadata("compiler/testData/capturedTypeApproximation/approximation")
    @TestDataPath("$PROJECT_ROOT")
    @InnerTestClasses({Approximation.Nullable.class, Approximation.UseSite.class})
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Approximation extends AbstractCapturedTypeApproximationTest {
        public void testAllFilesPresentInApproximation() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/capturedTypeApproximation/approximation"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("con.kt")
        public void testCon() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/con.kt");
            doTest(fileName);
        }

        @TestMetadata("conCon.kt")
        public void testConCon() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/conCon.kt");
            doTest(fileName);
        }

        @TestMetadata("conCov.kt")
        public void testConCov() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/conCov.kt");
            doTest(fileName);
        }

        @TestMetadata("conInv.kt")
        public void testConInv() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/conInv.kt");
            doTest(fileName);
        }

        @TestMetadata("cov.kt")
        public void testCov() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/cov.kt");
            doTest(fileName);
        }

        @TestMetadata("covCon.kt")
        public void testCovCon() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/covCon.kt");
            doTest(fileName);
        }

        @TestMetadata("covCov.kt")
        public void testCovCov() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/covCov.kt");
            doTest(fileName);
        }

        @TestMetadata("covInv.kt")
        public void testCovInv() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/covInv.kt");
            doTest(fileName);
        }

        @TestMetadata("inv.kt")
        public void testInv() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/inv.kt");
            doTest(fileName);
        }

        @TestMetadata("invCon.kt")
        public void testInvCon() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/invCon.kt");
            doTest(fileName);
        }

        @TestMetadata("invCov.kt")
        public void testInvCov() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/invCov.kt");
            doTest(fileName);
        }

        @TestMetadata("invInv.kt")
        public void testInvInv() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/invInv.kt");
            doTest(fileName);
        }

        @TestMetadata("invInvInv.kt")
        public void testInvInvInv() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/invInvInv.kt");
            doTest(fileName);
        }

        @TestMetadata("compiler/testData/capturedTypeApproximation/approximation/nullable")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Nullable extends AbstractCapturedTypeApproximationTest {
            public void testAllFilesPresentInNullable() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/capturedTypeApproximation/approximation/nullable"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("con.kt")
            public void testCon() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nullable/con.kt");
                doTest(fileName);
            }

            @TestMetadata("conCon.kt")
            public void testConCon() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nullable/conCon.kt");
                doTest(fileName);
            }

            @TestMetadata("conCov.kt")
            public void testConCov() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nullable/conCov.kt");
                doTest(fileName);
            }

            @TestMetadata("conInv.kt")
            public void testConInv() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nullable/conInv.kt");
                doTest(fileName);
            }

            @TestMetadata("cov.kt")
            public void testCov() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nullable/cov.kt");
                doTest(fileName);
            }

            @TestMetadata("covCon.kt")
            public void testCovCon() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nullable/covCon.kt");
                doTest(fileName);
            }

            @TestMetadata("covCov.kt")
            public void testCovCov() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nullable/covCov.kt");
                doTest(fileName);
            }

            @TestMetadata("covInv.kt")
            public void testCovInv() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nullable/covInv.kt");
                doTest(fileName);
            }

            @TestMetadata("inv.kt")
            public void testInv() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nullable/inv.kt");
                doTest(fileName);
            }

            @TestMetadata("invCon.kt")
            public void testInvCon() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nullable/invCon.kt");
                doTest(fileName);
            }

            @TestMetadata("invCov.kt")
            public void testInvCov() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nullable/invCov.kt");
                doTest(fileName);
            }

            @TestMetadata("invInv.kt")
            public void testInvInv() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nullable/invInv.kt");
                doTest(fileName);
            }

            @TestMetadata("invInvInv.kt")
            public void testInvInvInv() throws Exception {
                String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/nullable/invInvInv.kt");
                doTest(fileName);
            }
        }

        @TestMetadata("compiler/testData/capturedTypeApproximation/approximation/useSite")
        @TestDataPath("$PROJECT_ROOT")
        @InnerTestClasses({UseSite.In.class, UseSite.Out.class})
        @RunWith(JUnit3RunnerWithInners.class)
        public static class UseSite extends AbstractCapturedTypeApproximationTest {
            public void testAllFilesPresentInUseSite() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/capturedTypeApproximation/approximation/useSite"), Pattern.compile("^(.+)\\.kt$"), true);
            }

            @TestMetadata("compiler/testData/capturedTypeApproximation/approximation/useSite/in")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class In extends AbstractCapturedTypeApproximationTest {
                public void testAllFilesPresentInIn() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/capturedTypeApproximation/approximation/useSite/in"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("inv.kt")
                public void testInv() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/useSite/in/inv.kt");
                    doTest(fileName);
                }
            }

            @TestMetadata("compiler/testData/capturedTypeApproximation/approximation/useSite/out")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Out extends AbstractCapturedTypeApproximationTest {
                public void testAllFilesPresentInOut() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/capturedTypeApproximation/approximation/useSite/out"), Pattern.compile("^(.+)\\.kt$"), true);
                }

                @TestMetadata("inv.kt")
                public void testInv() throws Exception {
                    String fileName = JetTestUtils.navigationMetadata("compiler/testData/capturedTypeApproximation/approximation/useSite/out/inv.kt");
                    doTest(fileName);
                }
            }
        }
    }
}
